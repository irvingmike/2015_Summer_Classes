<?xml version="1.0" encoding="UTF-8"?>
<!--
  Extensible HTML version 1.0 Strict DTD
  
  This is the same as HTML 4 Strict except for
  changes due to the differences between XML and SGML.
  
  Namespace = http://www.w3.org/1999/xhtml
  
  For further information, see: http://www.w3.org/TR/xhtml1
  
  Copyright (c) 1998-2002 W3C (MIT, INRIA, Keio),
  All Rights Reserved. 
  
  This DTD module is identified by the PUBLIC and SYSTEM identifiers:
  
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  SYSTEM "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
  
  $Revision: 1.1 $
  $Date: 2004/03/26 10:30:54 $
  
-->
<!-- ================ Character mnemonic entities ========================= -->
<!-- ================== Imported Names ==================================== -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.w3.org/1999/xhtml" xmlns:xhtml="http://www.w3.org/1999/xhtml">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <xs:simpleType name="ContentType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- media type, as per [RFC2045] -->
  <xs:simpleType name="ContentTypes">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- comma-separated list of media types, as per [RFC2045] -->
  <xs:simpleType name="Charset">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a character encoding, as per [RFC2045] -->
  <xs:simpleType name="Charsets">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a space separated list of character encodings, as per [RFC2045] -->
  <xs:simpleType name="LanguageCode">
    <xs:restriction base="xs:NMTOKEN"/>
  </xs:simpleType>
  <!-- a language code, as per [RFC3066] -->
  <xs:simpleType name="Character">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a single character, as per section 2.2 of [XML] -->
  <xs:simpleType name="Number">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- one or more digits -->
  <xs:simpleType name="LinkTypes">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- space-separated list of link types -->
  <xs:simpleType name="MediaDesc">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- single or comma-separated list of media descriptors -->
  <xs:simpleType name="URI">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a Uniform Resource Identifier, see [RFC2396] -->
  <xs:simpleType name="UriList">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- a space separated list of Uniform Resource Identifiers -->
  <xs:simpleType name="Datetime">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- date and time information. ISO date format -->
  <xs:simpleType name="Script">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- script expression -->
  <xs:simpleType name="StyleSheet">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- style sheet data -->
  <xs:simpleType name="Text">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- used for titles etc. -->
  <xs:simpleType name="Length">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- nn for pixels or nn% for percentage length -->
  <xs:simpleType name="MultiLength">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- pixel, percentage, or relative -->
  <xs:simpleType name="Pixels">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- integer representing length in pixels -->
  <!-- these are used for image maps -->
  <xs:simpleType name="Shape">
    <xs:restriction base="xs:token">
      <xs:enumeration value="rect"/>
      <xs:enumeration value="circle"/>
      <xs:enumeration value="poly"/>
      <xs:enumeration value="default"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Coords">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <!-- comma separated list of lengths -->
  <!-- =================== Generic Attributes =============================== -->
  <!--
    core attributes common to most elements
    id       document-wide unique id
    class    space separated list of classes
    style    associated style info
    title    advisory title/amplification
  -->
  <xs:attributeGroup name="coreattrs">
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attribute name="class"/>
    <xs:attribute name="style" type="xhtml:StyleSheet"/>
    <xs:attribute name="title" type="xhtml:Text"/>
  </xs:attributeGroup>
  <!--
    internationalization attributes
    lang        language code (backwards compatible)
    xml:lang    language code (as per XML 1.0 spec)
    dir         direction for weak/neutral text
  -->
  <xs:attributeGroup name="i18n">
    <xs:attribute name="lang" type="xhtml:LanguageCode"/>
    <xs:attribute ref="xml:lang"/>
    <xs:attribute name="dir">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ltr"/>
          <xs:enumeration value="rtl"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    attributes for common UI events
    onclick     a pointer button was clicked
    ondblclick  a pointer button was double clicked
    onmousedown a pointer button was pressed down
    onmouseup   a pointer button was released
    onmousemove a pointer was moved onto the element
    onmouseout  a pointer was moved away from the element
    onkeypress  a key was pressed and released
    onkeydown   a key was pressed down
    onkeyup     a key was released
  -->
  <xs:attributeGroup name="events">
    <xs:attribute name="onclick" type="xhtml:Script"/>
    <xs:attribute name="ondblclick" type="xhtml:Script"/>
    <xs:attribute name="onmousedown" type="xhtml:Script"/>
    <xs:attribute name="onmouseup" type="xhtml:Script"/>
    <xs:attribute name="onmouseover" type="xhtml:Script"/>
    <xs:attribute name="onmousemove" type="xhtml:Script"/>
    <xs:attribute name="onmouseout" type="xhtml:Script"/>
    <xs:attribute name="onkeypress" type="xhtml:Script"/>
    <xs:attribute name="onkeydown" type="xhtml:Script"/>
    <xs:attribute name="onkeyup" type="xhtml:Script"/>
  </xs:attributeGroup>
  <!--
    attributes for elements that can get the focus
    accesskey   accessibility key character
    tabindex    position in tabbing order
    onfocus     the element got the focus
    onblur      the element lost the focus
  -->
  <xs:attributeGroup name="focus">
    <xs:attribute name="accesskey" type="xhtml:Character"/>
    <xs:attribute name="tabindex" type="xhtml:Number"/>
    <xs:attribute name="onfocus" type="xhtml:Script"/>
    <xs:attribute name="onblur" type="xhtml:Script"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="attrs">
    <xs:attributeGroup ref="xhtml:coreattrs"/>
    <xs:attributeGroup ref="xhtml:i18n"/>
    <xs:attributeGroup ref="xhtml:events"/>
  </xs:attributeGroup>
  <!-- =================== Text Elements ==================================== -->
  <xs:element name="special.pre" abstract="true" substitutionGroup="xhtml:special"/>
  <xs:element name="special" abstract="true" substitutionGroup="xhtml:inline"/>
  <xs:element name="fontstyle" abstract="true" substitutionGroup="xhtml:inline"/>
  <xs:element name="phrase" abstract="true" substitutionGroup="xhtml:inline"/>
  <xs:element name="inline.forms" abstract="true" substitutionGroup="xhtml:inline"/>
  <!-- these can occur at block or inline level -->
  <xs:element name="misc.inline" abstract="true" substitutionGroup="xhtml:misc"/>
  <!-- these can only occur at block level -->
  <xs:element name="misc" abstract="true"/>
  <xs:element name="inline" abstract="true"/>
  <!-- %Inline; covers inline or "text-level" elements -->
  <xs:complexType name="Inline" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:inline"/>
      <xs:element ref="xhtml:misc.inline"/>
    </xs:choice>
  </xs:complexType>
  <!-- ================== Block level elements ============================== -->
  <xs:element name="heading" abstract="true" substitutionGroup="xhtml:block"/>
  <xs:element name="lists" abstract="true" substitutionGroup="xhtml:block"/>
  <xs:element name="blocktext" abstract="true" substitutionGroup="xhtml:block"/>
  <xs:element name="block" abstract="true"/>
  <xs:complexType name="Block">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:block"/>
      <xs:element ref="xhtml:form"/>
      <xs:element ref="xhtml:misc"/>
    </xs:choice>
  </xs:complexType>
  <!-- %Flow; mixes block and inline and is used for list items etc. -->
  <xs:complexType name="Flow" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:block"/>
      <xs:element ref="xhtml:form"/>
      <xs:element ref="xhtml:inline"/>
      <xs:element ref="xhtml:misc"/>
    </xs:choice>
  </xs:complexType>
  <!-- ================== Content models for exclusions ===================== -->
  <!-- a elements use %Inline; excluding a -->
  <xs:complexType name="a.content" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:special"/>
      <xs:element ref="xhtml:fontstyle"/>
      <xs:element ref="xhtml:phrase"/>
      <xs:element ref="xhtml:inline.forms"/>
      <xs:element ref="xhtml:misc.inline"/>
    </xs:choice>
  </xs:complexType>
  <!-- pre uses %Inline excluding big, small, sup or sup -->
  <xs:complexType name="pre.content" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:a"/>
      <xs:element ref="xhtml:fontstyle"/>
      <xs:element ref="xhtml:phrase"/>
      <xs:element ref="xhtml:special.pre"/>
      <xs:element ref="xhtml:misc.inline"/>
      <xs:element ref="xhtml:inline.forms"/>
    </xs:choice>
  </xs:complexType>
  <!-- form uses %Block; excluding form -->
  <xs:complexType name="form.content">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:block"/>
      <xs:element ref="xhtml:misc"/>
    </xs:choice>
  </xs:complexType>
  <!-- button uses %Flow; but excludes a, form and form controls -->
  <xs:complexType name="button.content" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="xhtml:p"/>
      <xs:element ref="xhtml:heading"/>
      <xs:element ref="xhtml:div"/>
      <xs:element ref="xhtml:lists"/>
      <xs:element ref="xhtml:blocktext"/>
      <xs:element ref="xhtml:table"/>
      <xs:element ref="xhtml:special"/>
      <xs:element ref="xhtml:fontstyle"/>
      <xs:element ref="xhtml:phrase"/>
      <xs:element ref="xhtml:misc"/>
    </xs:choice>
  </xs:complexType>
  <!-- ================ Document Structure ================================== -->
  <!-- the namespace URI designates the document profile -->
  <xs:element name="html">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="xhtml:head"/>
        <xs:element ref="xhtml:body"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:html.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="html.attlist">
    <xs:attributeGroup ref="xhtml:i18n"/>
    <xs:attribute name="id" type="xs:ID"/>
  </xs:attributeGroup>
  <!-- ================ Document Head ======================================= -->
  <xs:group name="head.misc">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xhtml:script"/>
        <xs:element ref="xhtml:style"/>
        <xs:element ref="xhtml:meta"/>
        <xs:element ref="xhtml:link"/>
        <xs:element ref="xhtml:object"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <!--
    content model is %head.misc; combined with a single
    title and an optional base element in any order
  -->
  <xs:element name="head">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref="xhtml:head.misc"/>
        <xs:choice>
          <xs:sequence>
            <xs:element ref="xhtml:title"/>
            <xs:group ref="xhtml:head.misc"/>
            <xs:sequence minOccurs="0">
              <xs:element ref="xhtml:base"/>
              <xs:group ref="xhtml:head.misc"/>
            </xs:sequence>
          </xs:sequence>
          <xs:sequence>
            <xs:element ref="xhtml:base"/>
            <xs:group ref="xhtml:head.misc"/>
            <xs:sequence>
              <xs:element ref="xhtml:title"/>
              <xs:group ref="xhtml:head.misc"/>
            </xs:sequence>
          </xs:sequence>
        </xs:choice>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:head.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="head.attlist">
    <xs:attributeGroup ref="xhtml:i18n"/>
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attribute name="profile" type="xhtml:URI"/>
  </xs:attributeGroup>
  <!--
    The title element is not considered part of the flow of text.
    It should be displayed, for example as the page header or
    window title. Exactly one title is required per document.
  -->
  <xs:element name="title">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:title.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="title.attlist">
    <xs:attributeGroup ref="xhtml:i18n"/>
    <xs:attribute name="id" type="xs:ID"/>
  </xs:attributeGroup>
  <!-- document base URI -->
  <xs:element name="base">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:base.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="base.attlist">
    <xs:attribute name="href" use="required" type="xhtml:URI"/>
    <xs:attribute name="id" type="xs:ID"/>
  </xs:attributeGroup>
  <!-- generic metainformation -->
  <xs:element name="meta">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:meta.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="meta.attlist">
    <xs:attributeGroup ref="xhtml:i18n"/>
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attribute name="http-equiv"/>
    <xs:attribute name="name"/>
    <xs:attribute name="content" use="required"/>
    <xs:attribute name="scheme"/>
  </xs:attributeGroup>
  <!--
    Relationship values can be used in principle:
    
     a) for document specific toolbars/menus when used
        with the link element in document head e.g.
          start, contents, previous, next, index, end, help
     b) to link to a separate style sheet (rel="stylesheet")
     c) to make a link to a script (rel="script")
     d) by stylesheets to control how collections of
        html nodes are rendered into printed documents
     e) to make a link to a printable version of this document
        e.g. a PostScript or PDF version (rel="alternate" media="print")
  -->
  <xs:element name="link">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:link.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="link.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="charset" type="xhtml:Charset"/>
    <xs:attribute name="href" type="xhtml:URI"/>
    <xs:attribute name="hreflang" type="xhtml:LanguageCode"/>
    <xs:attribute name="type" type="xhtml:ContentType"/>
    <xs:attribute name="rel" type="xhtml:LinkTypes"/>
    <xs:attribute name="rev" type="xhtml:LinkTypes"/>
    <xs:attribute name="media" type="xhtml:MediaDesc"/>
  </xs:attributeGroup>
  <!-- style info, which may include CDATA sections -->
  <xs:element name="style">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:style.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="style.attlist">
    <xs:attributeGroup ref="xhtml:i18n"/>
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attribute name="type" use="required" type="xhtml:ContentType"/>
    <xs:attribute name="media" type="xhtml:MediaDesc"/>
    <xs:attribute name="title" type="xhtml:Text"/>
    <xs:attribute ref="xml:space" default="preserve"/>
  </xs:attributeGroup>
  <!-- script statements, which may include CDATA sections -->
  <xs:element name="script" substitutionGroup="xhtml:misc.inline">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:script.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="script.attlist">
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attribute name="charset" type="xhtml:Charset"/>
    <xs:attribute name="type" use="required" type="xhtml:ContentType"/>
    <xs:attribute name="src" type="xhtml:URI"/>
    <xs:attribute name="defer">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="defer"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute ref="xml:space" default="preserve"/>
  </xs:attributeGroup>
  <!-- alternate content container for non script-based rendering -->
  <xs:element name="noscript" substitutionGroup="xhtml:misc">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Block">
          <xs:attributeGroup ref="xhtml:noscript.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="noscript.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- =================== Document Body ==================================== -->
  <xs:element name="body">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Block">
          <xs:attributeGroup ref="xhtml:body.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="body.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="onload" type="xhtml:Script"/>
    <xs:attribute name="onunload" type="xhtml:Script"/>
  </xs:attributeGroup>
  <xs:element name="div" substitutionGroup="xhtml:block">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:div.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- generic language/style container -->
  <xs:attributeGroup name="div.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- =================== Paragraphs ======================================= -->
  <xs:element name="p" substitutionGroup="xhtml:block">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:p.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="p.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- =================== Headings ========================================= -->
  <!--
    There are six levels of headings from h1 (the most important)
    to h6 (the least important).
  -->
  <xs:element name="h1" substitutionGroup="xhtml:heading">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:h1.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="h1.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="h2" substitutionGroup="xhtml:heading">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:h2.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="h2.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="h3" substitutionGroup="xhtml:heading">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:h3.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="h3.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="h4" substitutionGroup="xhtml:heading">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:h4.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="h4.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="h5" substitutionGroup="xhtml:heading">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:h5.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="h5.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="h6" substitutionGroup="xhtml:heading">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:h6.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="h6.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- =================== Lists ============================================ -->
  <!-- Unordered list -->
  <xs:element name="ul" substitutionGroup="xhtml:lists">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:li"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:ul.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ul.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- Ordered (numbered) list -->
  <xs:element name="ol" substitutionGroup="xhtml:lists">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:li"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:ol.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ol.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- list item -->
  <xs:element name="li">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:li.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="li.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- definition lists - dt for term, dd for its definition -->
  <xs:element name="dl" substitutionGroup="xhtml:lists">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="xhtml:dt"/>
        <xs:element ref="xhtml:dd"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:dl.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="dl.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="dt">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:dt.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="dt.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="dd">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:dd.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="dd.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- =================== Address ========================================== -->
  <!-- information on author -->
  <xs:element name="address" substitutionGroup="xhtml:blocktext">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:address.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="address.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- =================== Horizontal Rule ================================== -->
  <xs:element name="hr" substitutionGroup="xhtml:blocktext">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:hr.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="hr.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- =================== Preformatted Text ================================ -->
  <!-- content is %Inline; excluding "img|object|big|small|sub|sup" -->
  <xs:element name="pre" substitutionGroup="xhtml:blocktext">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:pre.content">
          <xs:attributeGroup ref="xhtml:pre.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="pre.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute ref="xml:space" default="preserve"/>
  </xs:attributeGroup>
  <!-- =================== Block-like Quotes ================================ -->
  <xs:element name="blockquote" substitutionGroup="xhtml:blocktext">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Block">
          <xs:attributeGroup ref="xhtml:blockquote.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="blockquote.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="cite" type="xhtml:URI"/>
  </xs:attributeGroup>
  <!-- =================== Inserted/Deleted Text ============================ -->
  <!--
    ins/del are allowed in block and inline content, but its
    inappropriate to include block content within an ins element
    occurring in inline content.
  -->
  <xs:element name="ins" substitutionGroup="xhtml:misc.inline">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:ins.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="ins.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="cite" type="xhtml:URI"/>
    <xs:attribute name="datetime" type="xhtml:Datetime"/>
  </xs:attributeGroup>
  <xs:element name="del" substitutionGroup="xhtml:misc.inline">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:del.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="del.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="cite" type="xhtml:URI"/>
    <xs:attribute name="datetime" type="xhtml:Datetime"/>
  </xs:attributeGroup>
  <!-- ================== The Anchor Element ================================ -->
  <!-- content is %Inline; except that anchors shouldn't be nested -->
  <xs:element name="a" substitutionGroup="xhtml:inline">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:a.content">
          <xs:attributeGroup ref="xhtml:a.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="a.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:focus"/>
    <xs:attribute name="charset" type="xhtml:Charset"/>
    <xs:attribute name="type" type="xhtml:ContentType"/>
    <xs:attribute name="name" type="xs:NMTOKEN"/>
    <xs:attribute name="href" type="xhtml:URI"/>
    <xs:attribute name="hreflang" type="xhtml:LanguageCode"/>
    <xs:attribute name="rel" type="xhtml:LinkTypes"/>
    <xs:attribute name="rev" type="xhtml:LinkTypes"/>
    <xs:attribute name="shape" default="rect" type="xhtml:Shape"/>
    <xs:attribute name="coords" type="xhtml:Coords"/>
  </xs:attributeGroup>
  <!-- ===================== Inline Elements ================================ -->
  <xs:element name="span" substitutionGroup="xhtml:special.pre">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:span.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- generic language/style container -->
  <xs:attributeGroup name="span.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="bdo" substitutionGroup="xhtml:special.pre">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:bdo.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- I18N BiDi over-ride -->
  <xs:attributeGroup name="bdo.attlist">
    <xs:attributeGroup ref="xhtml:coreattrs"/>
    <xs:attributeGroup ref="xhtml:events"/>
    <xs:attribute name="lang" type="xhtml:LanguageCode"/>
    <xs:attribute ref="xml:lang"/>
    <xs:attribute name="dir" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ltr"/>
          <xs:enumeration value="rtl"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="br" substitutionGroup="xhtml:special.pre">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:br.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- forced line break -->
  <xs:attributeGroup name="br.attlist">
    <xs:attributeGroup ref="xhtml:coreattrs"/>
  </xs:attributeGroup>
  <xs:element name="em" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:em.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- emphasis -->
  <xs:attributeGroup name="em.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="strong" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:strong.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- strong emphasis -->
  <xs:attributeGroup name="strong.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="dfn" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:dfn.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- definitional -->
  <xs:attributeGroup name="dfn.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="code" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:code.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- program code -->
  <xs:attributeGroup name="code.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="samp" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:samp.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- sample -->
  <xs:attributeGroup name="samp.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="kbd" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:kbd.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- something user would type -->
  <xs:attributeGroup name="kbd.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="var" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:var.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- variable -->
  <xs:attributeGroup name="var.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="cite" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:cite.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- citation -->
  <xs:attributeGroup name="cite.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="abbr" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:abbr.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- abbreviation -->
  <xs:attributeGroup name="abbr.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="acronym" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:acronym.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- acronym -->
  <xs:attributeGroup name="acronym.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="q" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:q.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- inlined quote -->
  <xs:attributeGroup name="q.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="cite" type="xhtml:URI"/>
  </xs:attributeGroup>
  <xs:element name="sub" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:sub.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- subscript -->
  <xs:attributeGroup name="sub.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="sup" substitutionGroup="xhtml:phrase">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:sup.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- superscript -->
  <xs:attributeGroup name="sup.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="tt" substitutionGroup="xhtml:fontstyle">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:tt.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- fixed pitch font -->
  <xs:attributeGroup name="tt.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="i" substitutionGroup="xhtml:fontstyle">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:i.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- italic font -->
  <xs:attributeGroup name="i.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="b" substitutionGroup="xhtml:fontstyle">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:b.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- bold font -->
  <xs:attributeGroup name="b.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="big" substitutionGroup="xhtml:fontstyle">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:big.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- bigger font -->
  <xs:attributeGroup name="big.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="small" substitutionGroup="xhtml:fontstyle">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:small.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- smaller font -->
  <xs:attributeGroup name="small.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!-- ==================== Object ====================================== -->
  <!--
    object is used to embed objects as part of HTML pages.
    param elements should precede other content. Parameters
    can also be expressed as attribute/value pairs on the
    object element itself when brevity is desired.
  -->
  <xs:element name="object" substitutionGroup="xhtml:special">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xhtml:param"/>
        <xs:element ref="xhtml:block"/>
        <xs:element ref="xhtml:form"/>
        <xs:element ref="xhtml:inline"/>
        <xs:element ref="xhtml:misc"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:object.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="object.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="declare">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="declare"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="classid" type="xhtml:URI"/>
    <xs:attribute name="codebase" type="xhtml:URI"/>
    <xs:attribute name="data" type="xhtml:URI"/>
    <xs:attribute name="type" type="xhtml:ContentType"/>
    <xs:attribute name="codetype" type="xhtml:ContentType"/>
    <xs:attribute name="archive" type="xhtml:UriList"/>
    <xs:attribute name="standby" type="xhtml:Text"/>
    <xs:attribute name="height" type="xhtml:Length"/>
    <xs:attribute name="width" type="xhtml:Length"/>
    <xs:attribute name="usemap" type="xhtml:URI"/>
    <xs:attribute name="name" type="xs:NMTOKEN"/>
    <xs:attribute name="tabindex" type="xhtml:Number"/>
  </xs:attributeGroup>
  <!--
    param is used to supply a named property value.
    In XML it would seem natural to follow RDF and support an
    abbreviated syntax where the param elements are replaced
    by attribute value pairs on the object start tag.
  -->
  <xs:element name="param">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:param.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="param.attlist">
    <xs:attribute name="id" type="xs:ID"/>
    <xs:attribute name="name"/>
    <xs:attribute name="value"/>
    <xs:attribute name="valuetype" default="data">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="data"/>
          <xs:enumeration value="ref"/>
          <xs:enumeration value="object"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="type" type="xhtml:ContentType"/>
  </xs:attributeGroup>
  <!-- =================== Images =========================================== -->
  <!--
    To avoid accessibility problems for people who aren't
    able to see the image, you should provide a text
    description using the alt and longdesc attributes.
    In addition, avoid the use of server-side image maps.
    Note that in this DTD there is no name attribute. That
    is only available in the transitional and frameset DTD.
  -->
  <xs:element name="img" substitutionGroup="xhtml:special">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:img.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="img.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="src" use="required" type="xhtml:URI"/>
    <xs:attribute name="alt" use="required" type="xhtml:Text"/>
    <xs:attribute name="longdesc" type="xhtml:URI"/>
    <xs:attribute name="height" type="xhtml:Length"/>
    <xs:attribute name="width" type="xhtml:Length"/>
    <xs:attribute name="usemap" type="xhtml:URI"/>
    <xs:attribute name="ismap">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="ismap"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!--
    usemap points to a map element which may be in this document
    or an external document, although the latter is not widely supported
  -->
  <!-- ================== Client-side image maps ============================ -->
  <!--
    These can be placed in the same document or grouped in a
    separate document although this isn't yet widely supported
  -->
  <xs:element name="map" substitutionGroup="xhtml:special.pre">
    <xs:complexType>
      <xs:choice>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="xhtml:block"/>
          <xs:element ref="xhtml:form"/>
          <xs:element ref="xhtml:misc"/>
        </xs:choice>
        <xs:element maxOccurs="unbounded" ref="xhtml:area"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:map.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="map.attlist">
    <xs:attributeGroup ref="xhtml:i18n"/>
    <xs:attributeGroup ref="xhtml:events"/>
    <xs:attribute name="id" use="required" type="xs:ID"/>
    <xs:attribute name="class"/>
    <xs:attribute name="style" type="xhtml:StyleSheet"/>
    <xs:attribute name="title" type="xhtml:Text"/>
    <xs:attribute name="name" type="xs:NMTOKEN"/>
  </xs:attributeGroup>
  <xs:element name="area">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:area.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="area.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:focus"/>
    <xs:attribute name="shape" default="rect" type="xhtml:Shape"/>
    <xs:attribute name="coords" type="xhtml:Coords"/>
    <xs:attribute name="href" type="xhtml:URI"/>
    <xs:attribute name="nohref">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="nohref"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="alt" use="required" type="xhtml:Text"/>
  </xs:attributeGroup>
  <!-- ================ Forms =============================================== -->
  <xs:element name="form">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:form.content">
          <xs:attributeGroup ref="xhtml:form.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- forms shouldn't be nested -->
  <xs:attributeGroup name="form.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="action" use="required" type="xhtml:URI"/>
    <xs:attribute name="method" default="get">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="get"/>
          <xs:enumeration value="post"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="enctype" default="application/x-www-form-urlencoded" type="xhtml:ContentType"/>
    <xs:attribute name="onsubmit" type="xhtml:Script"/>
    <xs:attribute name="onreset" type="xhtml:Script"/>
    <xs:attribute name="accept" type="xhtml:ContentTypes"/>
    <xs:attribute name="accept-charset" type="xhtml:Charsets"/>
  </xs:attributeGroup>
  <!--
    Each label must not contain more than ONE field
    Label elements shouldn't be nested.
  -->
  <xs:element name="label" substitutionGroup="xhtml:inline.forms">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:label.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="label.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="for" type="xs:IDREF"/>
    <xs:attribute name="accesskey" type="xhtml:Character"/>
    <xs:attribute name="onfocus" type="xhtml:Script"/>
    <xs:attribute name="onblur" type="xhtml:Script"/>
  </xs:attributeGroup>
  <xs:simpleType name="InputType">
    <xs:restriction base="xs:token">
      <xs:enumeration value="text"/>
      <xs:enumeration value="password"/>
      <xs:enumeration value="checkbox"/>
      <xs:enumeration value="radio"/>
      <xs:enumeration value="submit"/>
      <xs:enumeration value="reset"/>
      <xs:enumeration value="file"/>
      <xs:enumeration value="hidden"/>
      <xs:enumeration value="image"/>
      <xs:enumeration value="button"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- the name attribute is required for all but submit & reset -->
  <xs:element name="input" substitutionGroup="xhtml:inline.forms">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:input.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- form control -->
  <xs:attributeGroup name="input.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:focus"/>
    <xs:attribute name="type" default="text" type="xhtml:InputType"/>
    <xs:attribute name="name"/>
    <xs:attribute name="value"/>
    <xs:attribute name="checked">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="checked"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="disabled">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="disabled"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="readonly">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="readonly"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="size"/>
    <xs:attribute name="maxlength" type="xhtml:Number"/>
    <xs:attribute name="src" type="xhtml:URI"/>
    <xs:attribute name="alt"/>
    <xs:attribute name="usemap" type="xhtml:URI"/>
    <xs:attribute name="onselect" type="xhtml:Script"/>
    <xs:attribute name="onchange" type="xhtml:Script"/>
    <xs:attribute name="accept" type="xhtml:ContentTypes"/>
  </xs:attributeGroup>
  <xs:element name="select" substitutionGroup="xhtml:inline.forms">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="xhtml:optgroup"/>
        <xs:element ref="xhtml:option"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:select.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- option selector -->
  <xs:attributeGroup name="select.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="name"/>
    <xs:attribute name="size" type="xhtml:Number"/>
    <xs:attribute name="multiple">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="multiple"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="disabled">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="disabled"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="tabindex" type="xhtml:Number"/>
    <xs:attribute name="onfocus" type="xhtml:Script"/>
    <xs:attribute name="onblur" type="xhtml:Script"/>
    <xs:attribute name="onchange" type="xhtml:Script"/>
  </xs:attributeGroup>
  <xs:element name="optgroup">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:option"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:optgroup.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- option group -->
  <xs:attributeGroup name="optgroup.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="disabled">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="disabled"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="label" use="required" type="xhtml:Text"/>
  </xs:attributeGroup>
  <xs:element name="option">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:option.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- selectable choice -->
  <xs:attributeGroup name="option.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="selected">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="selected"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="disabled">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="disabled"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="label" type="xhtml:Text"/>
    <xs:attribute name="value"/>
  </xs:attributeGroup>
  <xs:element name="textarea" substitutionGroup="xhtml:inline.forms">
    <xs:complexType mixed="true">
      <xs:attributeGroup ref="xhtml:textarea.attlist"/>
    </xs:complexType>
  </xs:element>
  <!-- multi-line text field -->
  <xs:attributeGroup name="textarea.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:focus"/>
    <xs:attribute name="name"/>
    <xs:attribute name="rows" use="required" type="xhtml:Number"/>
    <xs:attribute name="cols" use="required" type="xhtml:Number"/>
    <xs:attribute name="disabled">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="disabled"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="readonly">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="readonly"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="onselect" type="xhtml:Script"/>
    <xs:attribute name="onchange" type="xhtml:Script"/>
  </xs:attributeGroup>
  <!--
    The fieldset element is used to group form fields.
    Only one legend element should occur in the content
    and if present should only be preceded by whitespace.
  -->
  <xs:element name="fieldset" substitutionGroup="xhtml:block">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="xhtml:legend"/>
        <xs:element ref="xhtml:block"/>
        <xs:element ref="xhtml:form"/>
        <xs:element ref="xhtml:inline"/>
        <xs:element ref="xhtml:misc"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:fieldset.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="fieldset.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <xs:element name="legend">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:legend.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- fieldset label -->
  <xs:attributeGroup name="legend.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="accesskey" type="xhtml:Character"/>
  </xs:attributeGroup>
  <!-- Content is %Flow; excluding a, form and form controls -->
  <xs:element name="button" substitutionGroup="xhtml:inline.forms">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:button.content">
          <xs:attributeGroup ref="xhtml:button.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <!-- push button -->
  <xs:attributeGroup name="button.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:focus"/>
    <xs:attribute name="name"/>
    <xs:attribute name="value"/>
    <xs:attribute name="type" default="submit">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="button"/>
          <xs:enumeration value="submit"/>
          <xs:enumeration value="reset"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="disabled">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="disabled"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <!-- ======================= Tables ======================================= -->
  <!-- Derived from IETF HTML table standard, see [RFC1942] -->
  <!--
    The border attribute sets the thickness of the frame around the
    table. The default units are screen pixels.
    
    The frame attribute specifies which parts of the frame around
    the table should be rendered. The values are not the same as
    CALS to avoid a name clash with the valign attribute.
  -->
  <xs:simpleType name="TFrame">
    <xs:restriction base="xs:token">
      <xs:enumeration value="void"/>
      <xs:enumeration value="above"/>
      <xs:enumeration value="below"/>
      <xs:enumeration value="hsides"/>
      <xs:enumeration value="lhs"/>
      <xs:enumeration value="rhs"/>
      <xs:enumeration value="vsides"/>
      <xs:enumeration value="box"/>
      <xs:enumeration value="border"/>
    </xs:restriction>
  </xs:simpleType>
  <!--
    The rules attribute defines which rules to draw between cells:
    
    If rules is absent then assume:
        "none" if border is absent or border="0" otherwise "all"
  -->
  <xs:simpleType name="TRules">
    <xs:restriction base="xs:token">
      <xs:enumeration value="none"/>
      <xs:enumeration value="groups"/>
      <xs:enumeration value="rows"/>
      <xs:enumeration value="cols"/>
      <xs:enumeration value="all"/>
    </xs:restriction>
  </xs:simpleType>
  <!--
    horizontal alignment attributes for cell contents
    
    char        alignment char, e.g. char=':'
    charoff     offset for alignment char
  -->
  <xs:attributeGroup name="cellhalign">
    <xs:attribute name="align">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="left"/>
          <xs:enumeration value="center"/>
          <xs:enumeration value="right"/>
          <xs:enumeration value="justify"/>
          <xs:enumeration value="char"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="char" type="xhtml:Character"/>
    <xs:attribute name="charoff" type="xhtml:Length"/>
  </xs:attributeGroup>
  <!-- vertical alignment attributes for cell contents -->
  <xs:attributeGroup name="cellvalign">
    <xs:attribute name="valign">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="top"/>
          <xs:enumeration value="middle"/>
          <xs:enumeration value="bottom"/>
          <xs:enumeration value="baseline"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="table" substitutionGroup="xhtml:block">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="xhtml:caption"/>
        <xs:choice>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="xhtml:col"/>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="xhtml:colgroup"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="xhtml:thead"/>
        <xs:element minOccurs="0" ref="xhtml:tfoot"/>
        <xs:choice>
          <xs:element maxOccurs="unbounded" ref="xhtml:tbody"/>
          <xs:element maxOccurs="unbounded" ref="xhtml:tr"/>
        </xs:choice>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:table.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="caption">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Inline">
          <xs:attributeGroup ref="xhtml:caption.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="thead">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:tr"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:thead.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tfoot">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:tr"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:tfoot.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tbody">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="xhtml:tr"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:tbody.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="colgroup">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="xhtml:col"/>
      </xs:sequence>
      <xs:attributeGroup ref="xhtml:colgroup.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="col">
    <xs:complexType>
      <xs:attributeGroup ref="xhtml:col.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tr">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="xhtml:th"/>
        <xs:element ref="xhtml:td"/>
      </xs:choice>
      <xs:attributeGroup ref="xhtml:tr.attlist"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="th">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:th.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="td">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="xhtml:Flow">
          <xs:attributeGroup ref="xhtml:td.attlist"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="table.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="summary" type="xhtml:Text"/>
    <xs:attribute name="width" type="xhtml:Length"/>
    <xs:attribute name="border" type="xhtml:Pixels"/>
    <xs:attribute name="frame" type="xhtml:TFrame"/>
    <xs:attribute name="rules" type="xhtml:TRules"/>
    <xs:attribute name="cellspacing" type="xhtml:Length"/>
    <xs:attribute name="cellpadding" type="xhtml:Length"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="caption.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
  </xs:attributeGroup>
  <!--
    colgroup groups a set of col elements. It allows you to group
    several semantically related columns together.
  -->
  <xs:attributeGroup name="colgroup.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="span" default="1" type="xhtml:Number"/>
    <xs:attribute name="width" type="xhtml:MultiLength"/>
    <xs:attributeGroup ref="xhtml:cellhalign"/>
    <xs:attributeGroup ref="xhtml:cellvalign"/>
  </xs:attributeGroup>
  <!--
    col elements define the alignment properties for cells in
    one or more columns.
    
    The width attribute specifies the width of the columns, e.g.
    
        width=64        width in screen pixels
        width=0.5*      relative width of 0.5
    
    The span attribute causes the attributes of one
    col element to apply to more than one column.
  -->
  <xs:attributeGroup name="col.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="span" default="1" type="xhtml:Number"/>
    <xs:attribute name="width" type="xhtml:MultiLength"/>
    <xs:attributeGroup ref="xhtml:cellhalign"/>
    <xs:attributeGroup ref="xhtml:cellvalign"/>
  </xs:attributeGroup>
  <!--
    Use thead to duplicate headers when breaking table
    across page boundaries, or for static headers when
    tbody sections are rendered in scrolling panel.
    
    Use tfoot to duplicate footers when breaking table
    across page boundaries, or for static footers when
    tbody sections are rendered in scrolling panel.
    
    Use multiple tbody sections when rules are needed
    between groups of table rows.
  -->
  <xs:attributeGroup name="thead.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:cellhalign"/>
    <xs:attributeGroup ref="xhtml:cellvalign"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="tfoot.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:cellhalign"/>
    <xs:attributeGroup ref="xhtml:cellvalign"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="tbody.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:cellhalign"/>
    <xs:attributeGroup ref="xhtml:cellvalign"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="tr.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attributeGroup ref="xhtml:cellhalign"/>
    <xs:attributeGroup ref="xhtml:cellvalign"/>
  </xs:attributeGroup>
  <!-- Scope is simpler than headers attribute for common tables -->
  <xs:simpleType name="Scope">
    <xs:restriction base="xs:token">
      <xs:enumeration value="row"/>
      <xs:enumeration value="col"/>
      <xs:enumeration value="rowgroup"/>
      <xs:enumeration value="colgroup"/>
    </xs:restriction>
  </xs:simpleType>
  <!-- th is for headers, td for data and for cells acting as both -->
  <xs:attributeGroup name="th.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="abbr" type="xhtml:Text"/>
    <xs:attribute name="axis"/>
    <xs:attribute name="headers" type="xs:IDREFS"/>
    <xs:attribute name="scope" type="xhtml:Scope"/>
    <xs:attribute name="rowspan" default="1" type="xhtml:Number"/>
    <xs:attribute name="colspan" default="1" type="xhtml:Number"/>
    <xs:attributeGroup ref="xhtml:cellhalign"/>
    <xs:attributeGroup ref="xhtml:cellvalign"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="td.attlist">
    <xs:attributeGroup ref="xhtml:attrs"/>
    <xs:attribute name="abbr" type="xhtml:Text"/>
    <xs:attribute name="axis"/>
    <xs:attribute name="headers" type="xs:IDREFS"/>
    <xs:attribute name="scope" type="xhtml:Scope"/>
    <xs:attribute name="rowspan" default="1" type="xhtml:Number"/>
    <xs:attribute name="colspan" default="1" type="xhtml:Number"/>
    <xs:attributeGroup ref="xhtml:cellhalign"/>
    <xs:attributeGroup ref="xhtml:cellvalign"/>
  </xs:attributeGroup>
</xs:schema>
